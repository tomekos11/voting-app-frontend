/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VotingSystem {
  export type CandidateStruct = { name: BytesLike; metadataCID: string };

  export type CandidateStructOutput = [name: string, metadataCID: string] & {
    name: string;
    metadataCID: string;
  };
}

export interface AbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addVoter"
      | "createVoting"
      | "getCandidateCount"
      | "getVotingStatus"
      | "removeAdmin"
      | "removeVoter"
      | "vote"
      | "admins"
      | "chairman"
      | "voters"
      | "votingCount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VoteCast" | "VotingCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoting",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      VotingSystem.CandidateStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "chairman", values?: undefined): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "votingCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chairman", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingCount",
    data: BytesLike
  ): Result;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    votingId: BigNumberish,
    candidateIndex: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    votingId: bigint,
    candidateIndex: bigint
  ];
  export interface OutputObject {
    voter: string;
    votingId: bigint;
    candidateIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingCreatedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    title: string,
    votingType: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    title: string,
    votingType: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    title: string;
    votingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Abi extends BaseContract {
  connect(runner?: ContractRunner | null): Abi;
  waitForDeployment(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  addVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  createVoting: TypedContractMethod<
    [
      _title: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _votingType: BigNumberish,
      _candidates: VotingSystem.CandidateStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getCandidateCount: TypedContractMethod<
    [_votingId: BigNumberish],
    [bigint],
    "view"
  >;

  getVotingStatus: TypedContractMethod<
    [_votingId: BigNumberish],
    [string],
    "view"
  >;

  removeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  removeVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  vote: TypedContractMethod<
    [_votingId: BigNumberish, _candidateIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  chairman: TypedContractMethod<[], [string], "view">;

  voters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  votingCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createVoting"
  ): TypedContractMethod<
    [
      _title: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _votingType: BigNumberish,
      _candidates: VotingSystem.CandidateStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCandidateCount"
  ): TypedContractMethod<[_votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotingStatus"
  ): TypedContractMethod<[_votingId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_votingId: BigNumberish, _candidateIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "chairman"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "votingCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingCreated"
  ): TypedContractEvent<
    VotingCreatedEvent.InputTuple,
    VotingCreatedEvent.OutputTuple,
    VotingCreatedEvent.OutputObject
  >;

  filters: {
    "VoteCast(address,uint256,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingCreated(uint256,string,uint8)": TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;
    VotingCreated: TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;
  };
}
