/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VotingSystem {
  export type VotingInfoStruct = {
    id: BigNumberish;
    title: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    propositions: BytesLike[];
  };

  export type VotingInfoStructOutput = [
    id: bigint,
    title: string,
    startTime: bigint,
    endTime: bigint,
    propositions: string[]
  ] & {
    id: bigint;
    title: string;
    startTime: bigint;
    endTime: bigint;
    propositions: string[];
  };
}

export interface AbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addAdmin(address)"
      | "addVoter"
      | "addVoter(address)"
      | "createVoting"
      | "createVoting(string,uint256,uint256,uint8,bytes32[])"
      | "getVotingStatus"
      | "getVotingStatus(uint256)"
      | "getPropositions"
      | "getPropositions(uint256)"
      | "getVotingBatch"
      | "getVotingBatch(uint256[])"
      | "getActiveVotings"
      | "getActiveVotings(uint256,uint256)"
      | "getIncomingVotings"
      | "getIncomingVotings(uint256,uint256)"
      | "getCompletedVotings"
      | "getCompletedVotings(uint256,uint256)"
      | "removeAdmin"
      | "removeAdmin(address)"
      | "removeVoter"
      | "removeVoter(address)"
      | "vote"
      | "vote(uint256,uint256)"
      | "admins"
      | "admins(address)"
      | "chairman"
      | "chairman()"
      | "voters"
      | "voters(address)"
      | "votingCount"
      | "votingCount()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "VotingCreated"
      | "VotingCreated(uint256,string,uint8)"
      | "VoteCast"
      | "VoteCast(address,uint256,uint256)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoter(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoting",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoting(string,uint256,uint256,uint8,bytes32[])",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropositions(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingBatch(uint256[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotings(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncomingVotings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncomingVotings(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompletedVotings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompletedVotings(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVoter(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "admins(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "chairman", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chairman()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "voters(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingCount()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVoter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVoting(string,uint256,uint256,uint8,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropositions(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingBatch(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotings(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncomingVotings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncomingVotings(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompletedVotings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompletedVotings(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVoter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vote(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "admins(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chairman", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chairman()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voters(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCount()",
    data: BytesLike
  ): Result;
}

export namespace VotingCreatedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    title: string,
    votingType: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    title: string,
    votingType: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    title: string;
    votingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    votingId: BigNumberish,
    propositionIndex: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    votingId: bigint,
    propositionIndex: bigint
  ];
  export interface OutputObject {
    voter: string;
    votingId: bigint;
    propositionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Abi extends BaseContract {
  connect(runner?: ContractRunner | null): Abi;
  waitForDeployment(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  "addAdmin(address)": TypedContractMethod<
    [_admin: AddressLike],
    [void],
    "nonpayable"
  >;

  addVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  "addVoter(address)": TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  createVoting: TypedContractMethod<
    [
      _title: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _votingType: BigNumberish,
      _propositions: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  "createVoting(string,uint256,uint256,uint8,bytes32[])": TypedContractMethod<
    [
      _title: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _votingType: BigNumberish,
      _propositions: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getVotingStatus: TypedContractMethod<
    [_votingId: BigNumberish],
    [string],
    "view"
  >;

  "getVotingStatus(uint256)": TypedContractMethod<
    [_votingId: BigNumberish],
    [string],
    "view"
  >;

  getPropositions: TypedContractMethod<
    [votingId: BigNumberish],
    [string[]],
    "view"
  >;

  "getPropositions(uint256)": TypedContractMethod<
    [votingId: BigNumberish],
    [string[]],
    "view"
  >;

  getVotingBatch: TypedContractMethod<
    [ids: BigNumberish[]],
    [[string[], string[][]] & { titles: string[]; cids: string[][] }],
    "view"
  >;

  "getVotingBatch(uint256[])": TypedContractMethod<
    [ids: BigNumberish[]],
    [[string[], string[][]] & { titles: string[]; cids: string[][] }],
    "view"
  >;

  getActiveVotings: TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalActive: bigint;
      }
    ],
    "view"
  >;

  "getActiveVotings(uint256,uint256)": TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalActive: bigint;
      }
    ],
    "view"
  >;

  getIncomingVotings: TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalIncoming: bigint;
      }
    ],
    "view"
  >;

  "getIncomingVotings(uint256,uint256)": TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalIncoming: bigint;
      }
    ],
    "view"
  >;

  getCompletedVotings: TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalCompleted: bigint;
      }
    ],
    "view"
  >;

  "getCompletedVotings(uint256,uint256)": TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalCompleted: bigint;
      }
    ],
    "view"
  >;

  removeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  "removeAdmin(address)": TypedContractMethod<
    [_admin: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  "removeVoter(address)": TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_votingId: BigNumberish, _propositionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  "vote(uint256,uint256)": TypedContractMethod<
    [_votingId: BigNumberish, _propositionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  "admins(address)": TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  chairman: TypedContractMethod<[], [string], "view">;

  "chairman()": TypedContractMethod<[], [string], "view">;

  voters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  "voters(address)": TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  votingCount: TypedContractMethod<[], [bigint], "view">;

  "votingCount()": TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAdmin(address)"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVoter(address)"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createVoting"
  ): TypedContractMethod<
    [
      _title: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _votingType: BigNumberish,
      _propositions: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVoting(string,uint256,uint256,uint8,bytes32[])"
  ): TypedContractMethod<
    [
      _title: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _votingType: BigNumberish,
      _propositions: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVotingStatus"
  ): TypedContractMethod<[_votingId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVotingStatus(uint256)"
  ): TypedContractMethod<[_votingId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPropositions"
  ): TypedContractMethod<[votingId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPropositions(uint256)"
  ): TypedContractMethod<[votingId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVotingBatch"
  ): TypedContractMethod<
    [ids: BigNumberish[]],
    [[string[], string[][]] & { titles: string[]; cids: string[][] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingBatch(uint256[])"
  ): TypedContractMethod<
    [ids: BigNumberish[]],
    [[string[], string[][]] & { titles: string[]; cids: string[][] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveVotings"
  ): TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalActive: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveVotings(uint256,uint256)"
  ): TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalActive: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIncomingVotings"
  ): TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalIncoming: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIncomingVotings(uint256,uint256)"
  ): TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalIncoming: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCompletedVotings"
  ): TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalCompleted: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCompletedVotings(uint256,uint256)"
  ): TypedContractMethod<
    [page: BigNumberish, perPage: BigNumberish],
    [
      [VotingSystem.VotingInfoStructOutput[], bigint] & {
        votingsInfo: VotingSystem.VotingInfoStructOutput[];
        totalCompleted: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin(address)"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVoter(address)"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_votingId: BigNumberish, _propositionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote(uint256,uint256)"
  ): TypedContractMethod<
    [_votingId: BigNumberish, _propositionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "admins(address)"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "chairman"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chairman()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "voters(address)"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "votingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingCount()"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "VotingCreated"
  ): TypedContractEvent<
    VotingCreatedEvent.InputTuple,
    VotingCreatedEvent.OutputTuple,
    VotingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingCreated(uint256,string,uint8)"
  ): TypedContractEvent<
    VotingCreated_uint256_string_uint8_Event.InputTuple,
    VotingCreated_uint256_string_uint8_Event.OutputTuple,
    VotingCreated_uint256_string_uint8_Event.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast(address,uint256,uint256)"
  ): TypedContractEvent<
    VoteCast_address_uint256_uint256_Event.InputTuple,
    VoteCast_address_uint256_uint256_Event.OutputTuple,
    VoteCast_address_uint256_uint256_Event.OutputObject
  >;

  filters: {
    "VotingCreated(uint256,string,uint8)": TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;
    VotingCreated: TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
